services:

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  App\:
    resource: '../src/*'
    exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

  # controllers are imported separately to make sure services can be injected
  # as action arguments even if you don't extend any base controller class
  App\Controller\:
    resource: '../src/Controller'
    tags: ['controller.service_arguments']
    exclude: ['../src/Controller/SomeFile.php', '../src/Controller/OtherFile.php']

  command_handlers:
    namespace: App\Domain\
    resource: '../src/Domain/*/CommandHandler'
    tags: [command_handler]

  event_subscribers:
    namespace: App\Domain\
    resource: '../src/Domain/*/EventSubscriber'
    tags: [event_subscriber]
-----
<?php

use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return static function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator->services();

    $services->load('App\\', __DIR__ . '/../src/*')
        ->exclude([__DIR__ . '/../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}']);

    $services->load('App\Controller\\', __DIR__ . '/../src/Controller')
        ->exclude([__DIR__ . '/../src/Controller/SomeFile.php', __DIR__ . '/../src/Controller/OtherFile.php']);

    $services->load('App\Domain\\', __DIR__ . '/../src/Domain/*/CommandHandler');

    $services->load('App\Domain\\', __DIR__ . '/../src/Domain/*/EventSubscriber');
};
